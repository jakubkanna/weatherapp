(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),a=t.n(o),i=t(645),r=t.n(i)()(a());r.push([n.id,'/*RESET CSS\n  1. Use a more-intuitive box-sizing model.\n*/\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n/*\n    2. Remove default margin\n  */\n* {\n  margin: 0;\n}\n/*\n    Typographic tweaks!\n    3. Add accessible line-height\n    4. Improve text rendering\n  */\nbody {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n/*\n    5. Improve media defaults\n  */\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n  display: block;\n  max-width: 100%;\n}\n/*\n    6. Remove built-in form typography styles\n  */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n/*\n    7. Avoid text overflows\n  */\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  overflow-wrap: break-word;\n}\n/*\n    8. Create a root stacking context\n  */\n\n#root,\n#__next {\n  isolation: isolate;\n}\n\n/* WEATHER APP */\n\n/*layout*/\n\nhtml {\n  height: 100%;\n  width: 100%;\n}\nbody {\n  width: 100%;\n  max-width: 100%;\n  min-height: 100%;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  padding: 12px;\n}\nheader {\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  padding: 12px;\n  align-items: center;\n  z-index: 2;\n}\nheader > div {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\nfooter {\n  position: fixed;\n  bottom: 0;\n  z-index: 2;\n}\nh3,\nh4,\nh5,\nh6,\nh7,\nh8,\nh9 {\n  font-family: monospace;\n}\n#root {\n  width: 100%;\n}\n/* layout */\n#root {\n  display: grid;\n  gap: 12px;\n}\n#current,\n#location {\n  display: grid;\n  height: auto;\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n  gap: 12px;\n}\n\n#forecastday {\n  display: grid;\n  gap: 6px;\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n}\n#forecastday > * {\n  display: grid;\n  gap: 12px;\n}\n#forecastday > * > * > * {\n  padding: 3px;\n}\n#root > * > *:first-child,\n#forecastday {\n  grid-column: 1 / -1; /* Span from the first column to the last column */\n}\n/* outher */\n\n.hidden {\n  display: none !important;\n}\n/* display units */\n[id*="_c"] span::after {\n  content: "째C";\n}\n[id*="_f"] span::after {\n  content: "째F";\n}\n\n/*  */\n\n#date {\n  font-style: italic;\n  font-size: 9px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;CAEC;AACD;;;EAGE,sBAAsB;AACxB;AACA;;GAEG;AACH;EACE,SAAS;AACX;AACA;;;;GAIG;AACH;EACE,gBAAgB;EAChB,mCAAmC;AACrC;AACA;;GAEG;AACH;;;;;EAKE,cAAc;EACd,eAAe;AACjB;AACA;;GAEG;AACH;;;;EAIE,aAAa;AACf;AACA;;GAEG;AACH;;;;;;;EAOE,yBAAyB;AAC3B;AACA;;GAEG;;AAEH;;EAEE,kBAAkB;AACpB;;AAEA,gBAAgB;;AAEhB,SAAS;;AAET;EACE,YAAY;EACZ,WAAW;AACb;AACA;EACE,WAAW;EACX,eAAe;EACf,gBAAgB;EAChB,aAAa;EACb,iCAAiC;EACjC,aAAa;AACf;AACA;EACE,eAAe;EACf,SAAS;EACT,QAAQ;EACR,aAAa;EACb,mBAAmB;EACnB,UAAU;AACZ;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;AACA;EACE,eAAe;EACf,SAAS;EACT,UAAU;AACZ;AACA;;;;;;;EAOE,sBAAsB;AACxB;AACA;EACE,WAAW;AACb;AACA,WAAW;AACX;EACE,aAAa;EACb,SAAS;AACX;AACA;;EAEE,aAAa;EACb,YAAY;EACZ,2DAA2D;EAC3D,SAAS;AACX;;AAEA;EACE,aAAa;EACb,QAAQ;EACR,2DAA2D;AAC7D;AACA;EACE,aAAa;EACb,SAAS;AACX;AACA;EACE,YAAY;AACd;AACA;;EAEE,mBAAmB,EAAE,kDAAkD;AACzE;AACA,WAAW;;AAEX;EACE,wBAAwB;AAC1B;AACA,kBAAkB;AAClB;EACE,aAAa;AACf;AACA;EACE,aAAa;AACf;;AAEA,KAAK;;AAEL;EACE,kBAAkB;EAClB,cAAc;AAChB",sourcesContent:['/*RESET CSS\n  1. Use a more-intuitive box-sizing model.\n*/\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n/*\n    2. Remove default margin\n  */\n* {\n  margin: 0;\n}\n/*\n    Typographic tweaks!\n    3. Add accessible line-height\n    4. Improve text rendering\n  */\nbody {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n/*\n    5. Improve media defaults\n  */\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n  display: block;\n  max-width: 100%;\n}\n/*\n    6. Remove built-in form typography styles\n  */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n/*\n    7. Avoid text overflows\n  */\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  overflow-wrap: break-word;\n}\n/*\n    8. Create a root stacking context\n  */\n\n#root,\n#__next {\n  isolation: isolate;\n}\n\n/* WEATHER APP */\n\n/*layout*/\n\nhtml {\n  height: 100%;\n  width: 100%;\n}\nbody {\n  width: 100%;\n  max-width: 100%;\n  min-height: 100%;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  padding: 12px;\n}\nheader {\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  padding: 12px;\n  align-items: center;\n  z-index: 2;\n}\nheader > div {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\nfooter {\n  position: fixed;\n  bottom: 0;\n  z-index: 2;\n}\nh3,\nh4,\nh5,\nh6,\nh7,\nh8,\nh9 {\n  font-family: monospace;\n}\n#root {\n  width: 100%;\n}\n/* layout */\n#root {\n  display: grid;\n  gap: 12px;\n}\n#current,\n#location {\n  display: grid;\n  height: auto;\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n  gap: 12px;\n}\n\n#forecastday {\n  display: grid;\n  gap: 6px;\n  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n}\n#forecastday > * {\n  display: grid;\n  gap: 12px;\n}\n#forecastday > * > * > * {\n  padding: 3px;\n}\n#root > * > *:first-child,\n#forecastday {\n  grid-column: 1 / -1; /* Span from the first column to the last column */\n}\n/* outher */\n\n.hidden {\n  display: none !important;\n}\n/* display units */\n[id*="_c"] span::after {\n  content: "째C";\n}\n[id*="_f"] span::after {\n  content: "째F";\n}\n\n/*  */\n\n#date {\n  font-style: italic;\n  font-size: 9px;\n}\n'],sourceRoot:""}]);const s=r},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,a,i){"string"==typeof n&&(n=[[null,n,void 0]]);var r={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(r[c]=!0)}for(var A=0;A<n.length;A++){var d=[].concat(n[A]);o&&r[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(a," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},r=[],s=0;s<n.length;s++){var c=n[s],A=o.base?c[0]+o.base:c[0],d=i[A]||0,l="".concat(A," ").concat(d);i[A]=d+1;var p=t(l),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var h=a(u,o);o.byIndex=s,e.splice(s,0,{identifier:l,updater:h,references:1})}r.push(l)}return r}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var i=o(n=n||[],a=a||{});return function(n){n=n||[];for(var r=0;r<i.length;r++){var s=t(i[r]);e[s].references--}for(var c=o(n,a),A=0;A<i.length;A++){var d=t(i[A]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,a&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var a=e[o];if(void 0!==a)return a.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),o=t(795),a=t.n(o),i=t(569),r=t.n(i),s=t(565),c=t.n(s),A=t(216),d=t.n(A),l=t(589),p=t.n(l),u=t(426),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=r().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=d(),e()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;class m{constructor(n){this.data=n}createDivElement(n){const e=document.createElement("div");return e.id=n,e}insertHeader(n,e,t){const o=document.createElement(`h${t}`);o.textContent=e.charAt(0).toUpperCase()+e.slice(1),n.appendChild(o)}createNestedElements(n,e,t){for(const o in e)this.createElement(n,o,e[o],t)}createLeafElement(n,e){this.isImageURL(e)?this.createImageElement(n,e):this.createSpanElement(n,e)}createImageElement(n,e){const t=document.createElement("img");t.src=e,n.appendChild(t)}createSpanElement(n,e){const t=document.createElement("span");t.textContent=e,n.appendChild(t)}isImageURL(n){return/\.(gif|jpe?g|tiff?|png|webp|bmp)$/i.test(n)}generateDOM(){const n=this.createDivElement("root");for(const e in this.data)this.createElement(n,e,this.data[e]);return n}createElement(n,e,t,o=2){const a=this.createDivElement(e);this.insertHeader(a,e,o),"object"==typeof t?this.createNestedElements(a,t,o+1):this.createLeafElement(a,t),n.appendChild(a)}}class f{constructor(n,e,t){this.button=document.getElementById(n),this.visibleElements=document.querySelectorAll(e),this.hiddenSelector=t,this.toggle(),this.button.addEventListener("click",(()=>this.toggle())),document.querySelectorAll(t).forEach((n=>{n.classList.add("hidden")}))}toggle(){const n=!this.visibleElements[0].classList.contains("hidden");this.visibleElements.forEach((e=>e.classList.toggle("hidden",n))),document.querySelectorAll(this.hiddenSelector).forEach((e=>{e.classList.toggle("hidden",!n)}))}}class g{static exceptions=["#day_name, #day_name *","#location, #location > h2","#name, #name >*","#country, #country > *","#localtime, #localtime > *","#current, #current > h2",'[id*="temp"]:not([id*="temp_f"]), [id*="temp"] > *',"#condition, #condition :not(h4,h7,#code)","#forecast, #forecast h2,  #forecast > *","#forecastday > *:not(h3)","#date, #date *:not(h5)","#sunrise, #sunrise *","#day","#astro, #moonset, #moonset *","#moon_phase, #moon_phase *",".immune","#date_epoch, #date_epoch *",'[id*="feelslike"]:not([id*="feelslike_f"]), [id*="feelslike"] > *'];constructor(n,e){this.button=document.getElementById(n),this.rootElements=document.querySelectorAll(e),this.addImmunity(),this.toggle(),this.button.addEventListener("click",(()=>this.toggle()))}addImmunity(){const n=g.exceptions.join(", ");document.querySelectorAll(n).forEach((n=>{n.classList.add("immune")}))}toggle(){this.rootElements.forEach((n=>{n.classList.contains("immune")||n.classList.toggle("hidden")}))}}function E(n,e){let t={...n};const o=t.forecast.forecastday,a=C(t);return function(n){n.forEach((n=>{let e=n.date_epoch;const t=new Date(1e3*e).toLocaleDateString("en-US",{weekday:"long"});n.date_epoch=t}))}(o),function(n,e){n.forEach((async n=>{const t=`https://api.giphy.com/v1/gifs/translate?api_key=t9evMNjWyyMw8FgM8GfNFAG8TkuYUklE&s=${n.text} weather'`,o=(await e.getData(t)).data.url;n.icon=o}))}(a,e),t}function C(n){let e=[];for(const t in n)n.hasOwnProperty(t)&&("condition"===t&&n[t]instanceof Object?e.push(n[t]):n[t]instanceof Object&&(e=e.concat(C(n[t]))));return e}const y={fetcher:new class{async getData(n){try{const e=await fetch(`${n}`,{mode:"cors"});if(!e.ok)throw new Error("Network response was not OK");return await e.json()}catch(n){console.error("Caught error during forecast fetch:",n)}}storeData(n,e){localStorage.setItem(`${n}`,JSON.stringify(e))}},async getForecast(n){const e=`https://api.weatherapi.com/v1/forecast.json?key=0c74e0d9f7ae4709b0f121149230512&q=${n}&days=7`,t=await this.fetcher.getData(e),o=await E(t,this.fetcher);x.displayForecast(o)}},v={handleForm(){document.getElementById("cityName").addEventListener("submit",(n=>{n.preventDefault();const e=document.getElementById("_location").value.toString();x.formHandler(e)}))},handleMenuButtons(){new f("tempToggler",'[id*="_c"]','[id*="_f"]'),new g("detailToggler","#root *")}},x={init(){v.handleForm()},displayForecast(n){const e=new m(n).generateDOM(),t=document.body.querySelector("main");t.innerHTML="",t.appendChild(e),v.handleMenuButtons()},formHandler(n){y.getForecast(n)}};document.addEventListener("DOMContentLoaded",(()=>{x.init()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,