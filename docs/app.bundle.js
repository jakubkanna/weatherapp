(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,'/*RESET CSS\n  1. Use a more-intuitive box-sizing model.\n*/\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n/*\n    2. Remove default margin\n  */\n* {\n  margin: 0;\n}\n/*\n    Typographic tweaks!\n    3. Add accessible line-height\n    4. Improve text rendering\n  */\nbody {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n/*\n    5. Improve media defaults\n  */\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n  display: block;\n  max-width: 100%;\n}\n/*\n    6. Remove built-in form typography styles\n  */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n/*\n    7. Avoid text overflows\n  */\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  overflow-wrap: break-word;\n}\n/*\n    8. Create a root stacking context\n  */\n\n#root,\n#__next {\n  isolation: isolate;\n}\n\n/* WEATHER APP */\n\n/*layout*/\n\nhtml {\n  height: 100%;\n  width: 100%;\n}\nbody {\n  width: 100%;\n  max-width: 100%;\n  min-height: 100%;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  padding: 12px;\n}\nheader {\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  padding: 12px;\n  align-items: center;\n  z-index: 2;\n}\nheader > div {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\nfooter {\n  position: fixed;\n  bottom: 0;\n  z-index: 2;\n}\nh3,\nh4,\nh5,\nh6,\nh7,\nh8,\nh9 {\n  font-family: monospace;\n}\n#root {\n  width: 100%;\n}\n/* direct root childrens */\n#root > * {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n  width: 100%;\n}\n/* first child of #root direct childs direct children */\n#root > * > *:first-child {\n  width: 100%;\n  display: block;\n}\n#root * {\n  padding: 6px;\n}\n#forecast {\n  width: 100%;\n}\n#forecastday {\n  width: 100%;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 1fr);\n}\n#forecastday > *:first-child {\n  grid-column-start: 1;\n  grid-column-end: 8;\n}\n\n.shown {\n  display: block;\n}\n\n.hidden {\n  display: none !important;\n}\n/* display units */\n[id*="_c"] span::after {\n  content: "째C";\n}\n[id*="_f"] span::after {\n  content: "째F";\n}\n\n#forecastday > h3 {\n  content: "zzz";\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;CAEC;AACD;;;EAGE,sBAAsB;AACxB;AACA;;GAEG;AACH;EACE,SAAS;AACX;AACA;;;;GAIG;AACH;EACE,gBAAgB;EAChB,mCAAmC;AACrC;AACA;;GAEG;AACH;;;;;EAKE,cAAc;EACd,eAAe;AACjB;AACA;;GAEG;AACH;;;;EAIE,aAAa;AACf;AACA;;GAEG;AACH;;;;;;;EAOE,yBAAyB;AAC3B;AACA;;GAEG;;AAEH;;EAEE,kBAAkB;AACpB;;AAEA,gBAAgB;;AAEhB,SAAS;;AAET;EACE,YAAY;EACZ,WAAW;AACb;AACA;EACE,WAAW;EACX,eAAe;EACf,gBAAgB;EAChB,aAAa;EACb,iCAAiC;EACjC,aAAa;AACf;AACA;EACE,eAAe;EACf,SAAS;EACT,QAAQ;EACR,aAAa;EACb,mBAAmB;EACnB,UAAU;AACZ;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;AACA;EACE,eAAe;EACf,SAAS;EACT,UAAU;AACZ;AACA;;;;;;;EAOE,sBAAsB;AACxB;AACA;EACE,WAAW;AACb;AACA,0BAA0B;AAC1B;EACE,aAAa;EACb,eAAe;EACf,SAAS;EACT,WAAW;AACb;AACA,uDAAuD;AACvD;EACE,WAAW;EACX,cAAc;AAChB;AACA;EACE,YAAY;AACd;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;EACX,aAAa;EACb,4CAA4C;AAC9C;AACA;EACE,oBAAoB;EACpB,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,wBAAwB;AAC1B;AACA,kBAAkB;AAClB;EACE,aAAa;AACf;AACA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;AAChB",sourcesContent:['/*RESET CSS\n  1. Use a more-intuitive box-sizing model.\n*/\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n/*\n    2. Remove default margin\n  */\n* {\n  margin: 0;\n}\n/*\n    Typographic tweaks!\n    3. Add accessible line-height\n    4. Improve text rendering\n  */\nbody {\n  line-height: 1.5;\n  -webkit-font-smoothing: antialiased;\n}\n/*\n    5. Improve media defaults\n  */\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n  display: block;\n  max-width: 100%;\n}\n/*\n    6. Remove built-in form typography styles\n  */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n/*\n    7. Avoid text overflows\n  */\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  overflow-wrap: break-word;\n}\n/*\n    8. Create a root stacking context\n  */\n\n#root,\n#__next {\n  isolation: isolate;\n}\n\n/* WEATHER APP */\n\n/*layout*/\n\nhtml {\n  height: 100%;\n  width: 100%;\n}\nbody {\n  width: 100%;\n  max-width: 100%;\n  min-height: 100%;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  padding: 12px;\n}\nheader {\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  padding: 12px;\n  align-items: center;\n  z-index: 2;\n}\nheader > div {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n}\nfooter {\n  position: fixed;\n  bottom: 0;\n  z-index: 2;\n}\nh3,\nh4,\nh5,\nh6,\nh7,\nh8,\nh9 {\n  font-family: monospace;\n}\n#root {\n  width: 100%;\n}\n/* direct root childrens */\n#root > * {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n  width: 100%;\n}\n/* first child of #root direct childs direct children */\n#root > * > *:first-child {\n  width: 100%;\n  display: block;\n}\n#root * {\n  padding: 6px;\n}\n#forecast {\n  width: 100%;\n}\n#forecastday {\n  width: 100%;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 1fr);\n}\n#forecastday > *:first-child {\n  grid-column-start: 1;\n  grid-column-end: 8;\n}\n\n.shown {\n  display: block;\n}\n\n.hidden {\n  display: none !important;\n}\n/* display units */\n[id*="_c"] span::after {\n  content: "째C";\n}\n[id*="_f"] span::after {\n  content: "째F";\n}\n\n#forecastday > h3 {\n  content: "zzz";\n}\n'],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var d=[].concat(n[A]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],A=o.base?c[0]+o.base:c[0],d=a[A]||0,l="".concat(A," ").concat(d);a[A]=d+1;var h=t(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var u=r(p,o);o.byIndex=s,e.splice(s,0,{identifier:l,updater:u,references:1})}i.push(l)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=o(n,r),A=0;A<a.length;A++){var d=t(a[A]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),o=t(795),r=t.n(o),a=t(569),i=t.n(a),s=t(565),c=t.n(s),A=t(216),d=t.n(A),l=t(589),h=t.n(l),p=t(426),u={};u.styleTagTransform=h(),u.setAttributes=c(),u.insert=i().bind(null,"head"),u.domAPI=r(),u.insertStyleElement=d(),e()(p.Z,u),p.Z&&p.Z.locals&&p.Z.locals;class f{constructor(n){this.data=n}createDivElement(n){const e=document.createElement("div");return e.id=n,e}insertHeader(n,e,t){const o=document.createElement(`h${t}`);o.textContent=e.charAt(0).toUpperCase()+e.slice(1),n.appendChild(o)}createNestedElements(n,e,t){for(const o in e)this.createElement(n,o,e[o],t)}createLeafElement(n,e){this.isImageURL(e)?this.createImageElement(n,e):this.createSpanElement(n,e)}createImageElement(n,e){const t=document.createElement("img");t.src=e,n.appendChild(t)}createSpanElement(n,e){const t=document.createElement("span");t.textContent=e,n.appendChild(t)}isImageURL(n){return/\.(gif|jpe?g|tiff?|png|webp|bmp)$/i.test(n)}generateDOM(){const n=this.createDivElement("root");for(const e in this.data)this.createElement(n,e,this.data[e]);return n}createElement(n,e,t,o=2){const r=this.createDivElement(e);this.insertHeader(r,e,o),"object"==typeof t?this.createNestedElements(r,t,o+1):this.createLeafElement(r,t),n.appendChild(r)}}const m={async getForecast(n){try{const e=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=0c74e0d9f7ae4709b0f121149230512&q=${n}&days=7`,{mode:"cors"});if(!e.ok)throw new Error("Network response was not OK");const t=function(n){let e=n;return e.forecast.forecastday.forEach((n=>{let e=n.date_epoch;e=new Date(1e3*e).toLocaleDateString("en-US",{weekday:"long"})})),e}(await e.json());localStorage.setItem("weatherForecast",JSON.stringify(t)),C.displayForecast(t)}catch(n){console.error("Caught error during forecast fetch:",n)}}},E={handleForm(){document.getElementById("cityName").addEventListener("submit",(n=>{n.preventDefault();const e=document.getElementById("_location").value.toString();C.formHandler(e)}))},handleMenuButtons(){new g("tempToggler",'[id*="_c"]','[id*="_f"]'),new y("detailToggler","#root *")}},C={init(){E.handleForm();const n=localStorage.getItem("weatherForecast");if(n){const e=JSON.parse(n);this.displayForecast(e)}},displayForecast(n){const e=new f(n).generateDOM(),t=document.body.querySelector("main");t.innerHTML="",t.appendChild(e),E.handleMenuButtons()},formHandler(n){m.getForecast(n)}};document.addEventListener("DOMContentLoaded",(()=>{C.init()}));class g{constructor(n,e,t){this.button=document.getElementById(n),this.visibleElements=document.querySelectorAll(e),this.hiddenSelector=t,this.toggle(),this.button.addEventListener("click",(()=>this.toggle())),document.querySelectorAll(t).forEach((n=>{n.classList.add("hidden")}))}toggle(){const n=!this.visibleElements[0].classList.contains("hidden");this.visibleElements.forEach((e=>e.classList.toggle("hidden",n))),document.querySelectorAll(this.hiddenSelector).forEach((e=>{e.classList.toggle("hidden",!n)}))}}class y{static exceptions=["#location, #location > h2","#name, #name >*","#country, #country > *","#localtime, #localtime > *","#current, #current > h2",'[id*="temp"]:not([id*="temp_f"]), [id*="temp"] > *',"#condition, #condition :not(h4,h7,#code)","#forecast, #forecast h2, #forecast h4, #forecast > *, #forecastday > *","#date, #date *","#sunrise, #sunrise *","#day","#astro, #moonset, #moonset *","#moon_phase, #moon_phase *",".immune"];constructor(n,e){this.button=document.getElementById(n),this.rootElements=document.querySelectorAll(e),this.addImmunity(),this.toggle(),this.button.addEventListener("click",(()=>this.toggle()))}addImmunity(){const n=y.exceptions.join(", ");document.querySelectorAll(n).forEach((n=>{n.classList.add("immune")}))}toggle(){this.rootElements.forEach((n=>{n.classList.contains("immune")||n.classList.toggle("hidden")}))}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,